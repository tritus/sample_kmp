type Access {
  accessKit: [AccessStep!]!

  carEntryFinalStep: CarEntryFinalStep!

  carEntryInitialStep: CarEntryInitialStep!

  carEntrySteps: [AccessStep!]!

  carExitSteps: [AccessStep!]!
}

type AccessActionButton {
  confirmMessage: String

  fallbackResult: AccessResult

  key: String!

  label: String!
}

type AccessActionResult {
  actionKey: String!
}

enum AccessImageKey {
  """
  Barrier
  """
  BARRIER

  """
  Barrier
  """
  CAR_EXIT

  """
  Park
  """
  PARK

  """
  Unknown
  """
  UNKNOWN
}

type AccessInstruction {
  label: String!

  subLabel: String
}

type AccessPopupResult {
  content: String!

  dismissActionKey: String

  primaryActionButton: AccessActionButton!

  tertiaryActionButton: AccessActionButton

  title: String!
}

union AccessResult = AccessActionResult|AccessPopupResult

type AccessStep {
  accessKitTitle: String

  genericImageKey: AccessImageKey

  instructions: [AccessInstruction!]!

  primaryActionButton: AccessActionButton!

  step: Int!

  tertiaryActionButton: AccessActionButton

  title: String

  type: AccessType!
}

enum AccessType {
  """
  Car entry
  """
  CAR_ENTRY

  """
  Car exit
  """
  CAR_EXIT

  """
  Pedestrian entry
  """
  PEDESTRIAN_ENTRY

  """
  Pedestrian exit
  """
  PEDESTRIAN_EXIT
}

type Account implements Node {
  accountUser(id: ID): AccountUser

  accountUsers("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int, role: AccountUserRole, search: String): AccountUserConnection!

  autochargeConfigs("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): AutochargeConfigConnection!

  bookingIntent(id: ID!): BookingIntent

  canShowPaymentMethod: Boolean!

  capacityBookings("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CapacityBookingConnection!

  capacityOccurrences("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CapacityOccurrenceConnection!

  car(id: ID!): Car

  cars("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CarConnection!

  charge(id: ID!): Charge

  charges("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): ChargeConnection!

  currentRemoteCharge: RemoteCharge

  externalPaymentLabel: String

  fallbackCar: Car

  hasPaymentMethods: Boolean!

  id: ID!

  instantChargeIntent(id: ID!): InstantChargeIntent

  invitation(id: ID!): Invitation

  invitations("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int, search: String): InvitationConnection!

  label: String!

  logoUrl: String

  paymentIntent(id: ID!): PaymentIntent

  paymentMethod(id: ID!): PaymentMethod

  paymentMethods("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int, onlyValid: Boolean): PaymentMethodConnection!

  pro: Boolean!

  remoteCharges: [RemoteCharge!]!

  singleBooking(id: ID!): SingleBooking

  singleBookings: [SingleBooking!]!

  userDeletionIntent(id: ID!): UserDeletionIntent

  users("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): UserConnection! @deprecated(reason: "Use accountUsers instead")
}

"""
The connection type for Account.
"""
type AccountConnection {
  """
  A list of edges.
  """
  edges: [AccountEdge]

  """
  A list of nodes.
  """
  nodes: [Account]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Account
}

type AccountUser implements Node {
  account: Account!

  active: Boolean!

  canCreateCapacityBooking: Boolean!

  canCreateCar: Boolean!

  canCreateSingleBooking: Boolean!

  canDelete: Boolean!

  canEdit: Boolean!

  canEditRole: Boolean!

  canListCapacityBookings: Boolean!

  canListCars: Boolean!

  canListPayments: Boolean!

  canListUsers: Boolean!

  canUsePromoCode: Boolean!

  capacityOccurrences("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CapacityOccurrenceConnection!

  capacityUsage(id: ID!): CapacityUsage

  capacityUsages("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CapacityUsageConnection!

  firstname: String!

  fullname: String!

  id: ID!

  invitedBy: AccountUser

  joinedAt: ISO8601DateTime

  lastname: String

  role: AccountUserRole!

  user: User!
}

"""
The connection type for AccountUser.
"""
type AccountUserConnection {
  """
  A list of edges.
  """
  edges: [AccountUserEdge]

  """
  A list of nodes.
  """
  nodes: [AccountUser]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AccountUserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AccountUser
}

enum AccountUserRole {
  """
  User who can administrate the account
  """
  ADMIN

  """
  User who can charge only
  """
  MEMBER
}

type Autocharge implements Node {
  account: Account!

  accountUser: AccountUser!

  autochargeConfig: AutochargeConfig!

  car: Car!

  id: ID!
}

type AutochargeConfig implements Node {
  account: Account!

  accountUser: AccountUser!

  active: Boolean!

  car: Car!

  id: ID!

  paymentMethod: PaymentMethod
}

"""
The connection type for AutochargeConfig.
"""
type AutochargeConfigConnection {
  """
  A list of edges.
  """
  edges: [AutochargeConfigEdge]

  """
  A list of nodes.
  """
  nodes: [AutochargeConfig]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AutochargeConfigEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AutochargeConfig
}

type BookingIntent implements Node {
  account: Account!

  accountUser: User!

  at: ISO8601DateTime!

  car: Car!

  choices: [BookingIntentChoice!]!

  id: ID!

  originLatitude: Float!

  originLongitude: Float!

  pricingDetails: [PricingDetail!]

  promoCode: String

  user: User! @deprecated(reason: "Use accountUser instead")
}

type BookingIntentChoice implements Node {
  available: Boolean!

  bookingIntent: BookingIntent!

  id: ID!

  rank: Int!

  recommended: Boolean!

  spot: Spot

  startingAt: ISO8601DateTime

  station: Station!

  venueGeoDistance: Int

  venueRoadDistance: Int

  venueRoadDuration: Int
}

enum BookingIntentTarget {
  """
  Where the user is
  """
  ORIGIN

  """
  A specific position
  """
  POSITION

  """
  A specific Station
  """
  STATION
}

"""
Autogenerated input type of CallAccessAction
"""
input CallAccessActionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  actionKey: String!

  capacityUsageId: ID

  singleBookingId: ID

  step: Int!

  type: AccessType!
}

"""
Autogenerated return type of CallAccessAction.
"""
type CallAccessActionPayload {
  capacityUsage: CapacityUsage

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  result: AccessResult

  singleBooking: SingleBooking
}

"""
Autogenerated input type of CancelCapacityUsage
"""
input CancelCapacityUsageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  capacityUsageId: ID!
}

"""
Autogenerated return type of CancelCapacityUsage.
"""
type CancelCapacityUsagePayload {
  capacityUsage: CapacityUsage

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

"""
Autogenerated input type of CancelSingleBooking
"""
input CancelSingleBookingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  singleBookingId: ID!
}

"""
Autogenerated return type of CancelSingleBooking.
"""
type CancelSingleBookingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  singleBooking: SingleBooking
}

type CapacityBooking implements Node {
  account: Account!

  capacityOccurrences("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CapacityOccurrenceConnection!

  duration: Int!

  endAt: ISO8601DateTime!

  id: ID!

  recurrenceRuleIcal: String

  recurrenceUntil: ISO8601DateTime

  recurring: Boolean!

  spotCount: Int!

  startAt: ISO8601DateTime!

  station: Station!
}

"""
The connection type for CapacityBooking.
"""
type CapacityBookingConnection {
  """
  A list of edges.
  """
  edges: [CapacityBookingEdge]

  """
  A list of nodes.
  """
  nodes: [CapacityBooking]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CapacityBookingEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CapacityBooking
}

type CapacityOccurrence implements Node {
  account: Account!

  capacityBooking: CapacityBooking!

  duration: Int!

  endAt: ISO8601DateTime!

  id: ID!

  spotCount: Int!

  spots("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): SpotConnection!

  startAt: ISO8601DateTime!

  station: Station!
}

"""
The connection type for CapacityOccurrence.
"""
type CapacityOccurrenceConnection {
  """
  A list of edges.
  """
  edges: [CapacityOccurrenceEdge]

  """
  A list of nodes.
  """
  nodes: [CapacityOccurrence]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CapacityOccurrenceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CapacityOccurrence
}

type CapacityUsage implements Node {
  access: Access!

  canBeCanceled: Boolean!

  canBeFinished: Boolean!

  canDisplayAccess: Boolean!

  canExit: Boolean!

  capacityOccurrence: CapacityOccurrence!

  endAt: ISO8601DateTime!

  id: ID!

  spots("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): SpotConnection!

  startAt: ISO8601DateTime!

  station: Station!
}

"""
The connection type for CapacityUsage.
"""
type CapacityUsageConnection {
  """
  A list of edges.
  """
  edges: [CapacityUsageEdge]

  """
  A list of nodes.
  """
  nodes: [CapacityUsage]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CapacityUsageEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CapacityUsage
}

type Car implements Node {
  account: Account!

  canBeDeleted: Boolean!

  canBeEdited: Boolean!

  carBrand: CarBrand!

  carModel: CarModel

  carVersion: CarVersion

  friendlyIdentifier: String!

  friendlyName: String!

  friendlyVersion: String!

  id: ID!

  licensePlateCountry: Country

  licensePlateNumber: String

  manualModelName: String @deprecated(reason: "Do not use anymore. Use only manual plugs if applicable.")

  manualPlugs: [ConnectorPlug!]!

  manualVersionName: String @deprecated(reason: "Do not use anymore. Use only manual plugs if applicable.")

  missingInfos: Boolean!

  pro: Boolean!
}

type CarBrand implements Node {
  carModels: [CarModel!]!

  id: ID!

  name: String!
}

"""
The connection type for CarBrand.
"""
type CarBrandConnection {
  """
  A list of edges.
  """
  edges: [CarBrandEdge]

  """
  A list of nodes.
  """
  nodes: [CarBrand]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CarBrandEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CarBrand
}

"""
The connection type for Car.
"""
type CarConnection {
  """
  A list of edges.
  """
  edges: [CarEdge]

  """
  A list of nodes.
  """
  nodes: [Car]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CarEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Car
}

type CarEntryFinalStep {
  manualContent: String

  qrCodeContent: String!

  title: String!
}

type CarEntryInitialStep {
  destinationAddress: String!

  destinationLatitude: Float!

  destinationLongitude: Float!

  destinationName: String!

  primaryActionButton: AccessActionButton!

  subTitle: String

  title: String!
}

type CarModel implements Node {
  carBrand: CarBrand!

  carVersions: [CarVersion!]!

  id: ID!

  name: String!
}

type CarVersion implements Node {
  carModel: CarModel!

  id: ID!

  name: String!

  plugs: [ConnectorPlug!]!

  usableBatteryCapacity: Int!

  yearEnd: Int!

  yearStart: Int!
}

type Card {
  action: CardActionEnum!

  actionLabel: String

  deeplink: String

  overtitle: String

  picture: CardPictureEnum

  text: String

  theme: CardThemeEnum!

  title: String
}

enum CardActionEnum {
  """
  Icon
  """
  icon

  """
  Label
  """
  label

  """
  None
  """
  none
}

enum CardPictureEnum {
  """
  Rate app
  """
  RATE_APP

  """
  Reco fast
  """
  RECO_FAST

  """
  Reco feature
  """
  RECO_FEATURE
}

enum CardThemeEnum {
  """
  Dark
  """
  dark

  """
  Light
  """
  light
}

"""
Autogenerated input type of ChangeAutochargeConfigActive
"""
input ChangeAutochargeConfigActiveInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  autochargeConfigId: ID!

  active: Boolean!
}

"""
Autogenerated return type of ChangeAutochargeConfigActive.
"""
type ChangeAutochargeConfigActivePayload {
  autochargeConfig: AutochargeConfig

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

"""
Autogenerated input type of ChangeAutochargeConfigPaymentMethod
"""
input ChangeAutochargeConfigPaymentMethodInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  autochargeConfigId: ID!

  paymentMethodId: ID!
}

"""
Autogenerated return type of ChangeAutochargeConfigPaymentMethod.
"""
type ChangeAutochargeConfigPaymentMethodPayload {
  autochargeConfig: AutochargeConfig

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

"""
Autogenerated input type of ChangeRemoteChargeObjective
"""
input ChangeRemoteChargeObjectiveInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  remoteChargeId: ID!

  targetSoc: Int!
}

"""
Autogenerated return type of ChangeRemoteChargeObjective.
"""
type ChangeRemoteChargeObjectivePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  remoteCharge: RemoteCharge
}

type Charge implements Node {
  account: Account!

  accountUser: User!

  canShowPricing: Boolean!

  car: Car

  currency: Currency!

  date: ISO8601DateTime!

  details: [ChargeDetail!]

  id: ID!

  invoice: Invoice

  station: Station!

  taxes: [ChargeDetail!]

  totalAmountCents: Int!

  totalDuration: Int!

  totalEnergy: Int!

  user: User @deprecated(reason: "Use accountUser instead")
}

"""
The connection type for Charge.
"""
type ChargeConnection {
  """
  A list of edges.
  """
  edges: [ChargeEdge]

  """
  A list of nodes.
  """
  nodes: [Charge]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

type ChargeDetail {
  amountCents: Int!

  label: String!

  sublabel: String

  type: ChargeDetailEnum!
}

enum ChargeDetailEnum {
  """
  Price
  """
  price

  """
  Coupon
  """
  coupon

  """
  Discount
  """
  discount
}

"""
An edge in a connection.
"""
type ChargeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Charge
}

type ChargePoint implements Node {
  availability: ChargePointAvailability

  connectors: [Connector!]!

  errorMessage: String @deprecated(reason: "Field not needed any longer due to UI updates")

  errorTitle: String @deprecated(reason: "Field not needed any longer due to UI updates")

  id: ID!

  noConnectorAvailable: Boolean! @deprecated(reason: "Field not needed any longer due to UI updates")

  publicCode: String!

  station: Station!
}

type ChargePointAvailability {
  cardType: ChargePointAvailabilityCardTypeEnum

  message: String

  title: String!
}

enum ChargePointAvailabilityCardTypeEnum {
  """
  Warning
  """
  WARNING

  """
  Info
  """
  INFO
}

enum ChargeTypeEnum {
  """
  Slow Charge
  """
  slow_charge

  """
  Fast Charge
  """
  fast_charge
}

"""
Autogenerated input type of CheckChargePointQrCode
"""
input CheckChargePointQrCodeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  qrCode: String!
}

"""
Autogenerated return type of CheckChargePointQrCode.
"""
type CheckChargePointQrCodePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  qrCode: String

  qrCodeAccepted: Boolean
}

"""
Autogenerated input type of CheckLicensePlate
"""
input CheckLicensePlateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  licensePlateCountry: Country

  licensePlateNumber: String
}

"""
Autogenerated return type of CheckLicensePlate.
"""
type CheckLicensePlatePayload {
  carBrand: CarBrand

  carModel: CarModel

  carVersion: CarVersion

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  licensePlateCountry: Country

  licensePlateNumber: String

  message: String
}

"""
Autogenerated input type of CompleteInvitation
"""
input CompleteInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  accepted: Boolean!

  invitationId: String!
}

"""
Autogenerated return type of CompleteInvitation.
"""
type CompleteInvitationPayload {
  account: Account

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  successMessage: String

  successTitle: String
}

"""
Autogenerated input type of CompletePhoneChallenge
"""
input CompletePhoneChallengeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  challengeToken: String!

  challengeCode: Int!
}

"""
Autogenerated return type of CompletePhoneChallenge.
"""
type CompletePhoneChallengePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  completionToken: String

  errors: [String!]!
}

"""
Autogenerated input type of ConfirmBookingIntentChoice
"""
input ConfirmBookingIntentChoiceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  bookingIntentChoiceId: ID!

  paymentIntentId: ID
}

"""
Autogenerated return type of ConfirmBookingIntentChoice.
"""
type ConfirmBookingIntentChoicePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  singleBooking: SingleBooking
}

"""
Autogenerated input type of ConfirmBookingVenueFinalStep
"""
input ConfirmBookingVenueFinalStepInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  singleBookingId: ID!

  qrCode: String!
}

"""
Autogenerated return type of ConfirmBookingVenueFinalStep.
"""
type ConfirmBookingVenueFinalStepPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  paymentIntent: PaymentIntent

  qrCodeAccepted: Boolean

  remoteCharge: RemoteCharge

  singleBooking: SingleBooking
}

"""
Autogenerated input type of ConfirmBookingVenuePaymentStep
"""
input ConfirmBookingVenuePaymentStepInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  paymentIntentId: ID!

  singleBookingId: ID!
}

"""
Autogenerated return type of ConfirmBookingVenuePaymentStep.
"""
type ConfirmBookingVenuePaymentStepPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  remoteCharge: RemoteCharge

  singleBooking: SingleBooking
}

"""
Autogenerated input type of ConfirmCapacityUsageConnector
"""
input ConfirmCapacityUsageConnectorInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  capacityUsageId: ID!

  connectorId: ID!
}

"""
Autogenerated return type of ConfirmCapacityUsageConnector.
"""
type ConfirmCapacityUsageConnectorPayload {
  capacityUsage: CapacityUsage

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  remoteCharge: RemoteCharge
}

"""
Autogenerated input type of ConfirmCapacityUsage
"""
input ConfirmCapacityUsageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  capacityUsageId: ID!

  qrCode: String!
}

"""
Autogenerated return type of ConfirmCapacityUsage.
"""
type ConfirmCapacityUsagePayload {
  capacityUsage: CapacityUsage

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  connectorChoices: [Connector!]

  errors: [String!]!

  qrCodeAccepted: Boolean

  remoteCharge: RemoteCharge
}

"""
Autogenerated input type of ConfirmInstantChargeIntent
"""
input ConfirmInstantChargeIntentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  instantChargeIntentId: ID!

  paymentIntentId: ID
}

"""
Autogenerated return type of ConfirmInstantChargeIntent.
"""
type ConfirmInstantChargeIntentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  remoteCharge: RemoteCharge
}

"""
Autogenerated input type of ConfirmUserDeletionIntent
"""
input ConfirmUserDeletionIntentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  userDeletionIntentId: ID!

  comment: String
}

"""
Autogenerated return type of ConfirmUserDeletionIntent.
"""
type ConfirmUserDeletionIntentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  deleted: Boolean

  errors: [String!]!
}

type Connector implements Node {
  availability: ConnectorPublicAvailability!

  chargePoint: ChargePoint!

  chargeType: ChargeTypeEnum!

  id: ID!

  number: Int!

  plug: ConnectorPlug!

  plugShortName: String!

  publicLabel: String!

  publicStatus: ConnectorPublicStatus!

  spot: Spot!

  station: Station!
}

enum ConnectorPlug {
  """
  Combo CCS
  """
  COMBO_CCS_EU

  """
  Domestic EU
  """
  SCHUKO

  """
  Type 2
  """
  TYPE2

  """
  Type 2 (cable attached)
  """
  TYPE2_CABLE_ATTACHED

  """
  Type 3c
  """
  TYPE3C

  """
  CHAdeMO
  """
  TYPE4
}

enum ConnectorPublicAvailability {
  """
  The spot is available
  """
  AVAILABLE

  """
  The spot is occupied
  """
  OCCUPIED

  """
  The spot is reserved
  """
  RESERVED

  """
  The spot is unavailable
  """
  UNAVAILABLE
}

enum ConnectorPublicStatus {
  """
  The connector is operative
  """
  OPERATIVE

  """
  The connector is inoperative
  """
  INOPERATIVE
}

enum Country {
  """
  Andorre
  """
  AD

  """
  Autriche
  """
  AU

  """
  Belgique
  """
  BE

  """
  Bulgarie
  """
  BG

  """
  Suisse
  """
  CH

  """
  Chypre
  """
  CY

  """
  République tchèque
  """
  CZ

  """
  Allemagne
  """
  DE

  """
  Danemark
  """
  DK

  """
  Estonie
  """
  EE

  """
  Espagne
  """
  ES

  """
  Finlande
  """
  FI

  """
  France
  """
  FR

  """
  Grèce
  """
  GR

  """
  Croatie
  """
  HR

  """
  Hongrie
  """
  HU

  """
  Irlande
  """
  IE

  """
  Italie
  """
  IT

  """
  Lituanie
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Lettonie
  """
  LV

  """
  Monaco
  """
  MC

  """
  Malte
  """
  MT

  """
  Pays-Bas
  """
  NL

  """
  Norvège
  """
  NO

  """
  Pologne
  """
  PL

  """
  Portugal
  """
  PT

  """
  Roumanie
  """
  RO

  """
  Suède
  """
  SE

  """
  Slovénie
  """
  SI

  """
  Slovaquie
  """
  SK

  """
  Royaume-Uni
  """
  UK
}

type CountryObject implements Node {
  callingCode: String!

  id: ID!

  key: Country!

  name: String!
}

"""
Autogenerated input type of CreateAnonymousRight
"""
input CreateAnonymousRightInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  phoneNumber: String!

  accessId: ID!
}

"""
Autogenerated return type of CreateAnonymousRight.
"""
type CreateAnonymousRightPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  success: Boolean
}

"""
Autogenerated input type of CreateBookingIntent
"""
input CreateBookingIntentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  accountId: ID!

  carId: ID!

  target: BookingIntentTarget!

  originLatitude: Float!

  originLongitude: Float!

  targetLatitude: Float

  targetLongitude: Float

  targetStationId: ID
}

"""
Autogenerated return type of CreateBookingIntent.
"""
type CreateBookingIntentPayload {
  bookingIntent: BookingIntent

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

"""
Autogenerated input type of CreateCapacityBooking
"""
input CreateCapacityBookingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  accountId: ID!

  duration: Int!

  recurrenceRuleIcal: String

  recurrenceUntil: String

  recurring: Boolean!

  spotCount: Int!

  startAt: String!

  stationId: ID!
}

"""
Autogenerated return type of CreateCapacityBooking.
"""
type CreateCapacityBookingPayload {
  capacityBooking: CapacityBooking

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

"""
Autogenerated input type of CreateCapacityUsage
"""
input CreateCapacityUsageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  capacityOccurrenceId: ID!

  originLatitude: Float!

  originLongitude: Float!
}

"""
Autogenerated return type of CreateCapacityUsage.
"""
type CreateCapacityUsagePayload {
  capacityUsage: CapacityUsage

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

"""
Autogenerated input type of CreateCar
"""
input CreateCarInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  accountId: ID!

  carBrandId: ID!

  carModelId: ID

  carVersionId: ID

  licensePlateCountry: Country

  licensePlateNumber: String

  manualPlugs: [ConnectorPlug!]
}

"""
Autogenerated return type of CreateCar.
"""
type CreateCarPayload {
  car: Car

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

"""
Autogenerated input type of CreateInstantChargeIntent
"""
input CreateInstantChargeIntentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  accountId: ID!

  carId: ID

  connectorId: ID!

  entrySource: InstantChargeIntentEntrySource
}

"""
Autogenerated return type of CreateInstantChargeIntent.
"""
type CreateInstantChargeIntentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  instantChargeIntent: InstantChargeIntent
}

"""
Autogenerated input type of CreateInvitation
"""
input CreateInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  accountId: ID!

  firstname: String!

  lastname: String!

  phoneNumber: String!
}

"""
Autogenerated return type of CreateInvitation.
"""
type CreateInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  invitation: Invitation

  successMessage: String

  successTitle: String
}

"""
Autogenerated input type of CreatePaymentMethod
"""
input CreatePaymentMethodInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  accountId: ID!

  processoutCardRef: String!
}

"""
Autogenerated return type of CreatePaymentMethod.
"""
type CreatePaymentMethodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  paymentMethod: PaymentMethod
}

"""
Autogenerated input type of CreateReview
"""
input CreateReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  accountId: ID!

  remoteChargeId: ID

  comment: String

  rating: Int!
}

"""
Autogenerated return type of CreateReview.
"""
type CreateReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  success: Boolean
}

"""
Autogenerated input type of CreateUserDeletionIntent
"""
input CreateUserDeletionIntentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  accountId: ID!
}

"""
Autogenerated return type of CreateUserDeletionIntent.
"""
type CreateUserDeletionIntentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  userDeletionIntent: UserDeletionIntent
}

enum Currency {
  """
  EUR
  """
  EUR
}

"""
Autogenerated input type of DeleteCar
"""
input DeleteCarInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  carId: ID!
}

"""
Autogenerated return type of DeleteCar.
"""
type DeleteCarPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

"""
Autogenerated input type of DeletePaymentMethod
"""
input DeletePaymentMethodInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  paymentMethodId: ID!
}

"""
Autogenerated return type of DeletePaymentMethod.
"""
type DeletePaymentMethodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

"""
Autogenerated input type of DismissExitSteps
"""
input DismissExitStepsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  capacityUsageId: ID

  singleBookingId: ID
}

"""
Autogenerated return type of DismissExitSteps.
"""
type DismissExitStepsPayload {
  capacityUsage: CapacityUsage

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  singleBooking: SingleBooking
}

"""
Autogenerated input type of FinishCapacityUsage
"""
input FinishCapacityUsageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  capacityUsageId: ID!
}

"""
Autogenerated return type of FinishCapacityUsage.
"""
type FinishCapacityUsagePayload {
  capacityUsage: CapacityUsage

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

"""
Autogenerated input type of FinishSingleBooking
"""
input FinishSingleBookingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  singleBookingId: ID!
}

"""
Autogenerated return type of FinishSingleBooking.
"""
type FinishSingleBookingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  singleBooking: SingleBooking
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Autogenerated input type of InquireInstantChargePaymentIntent
"""
input InquireInstantChargePaymentIntentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  instantChargeIntentId: ID!
}

"""
Autogenerated return type of InquireInstantChargePaymentIntent.
"""
type InquireInstantChargePaymentIntentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  needed: Boolean

  paymentIntent: PaymentIntent
}

"""
Autogenerated input type of InquirePaymentIntent
"""
input InquirePaymentIntentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  bookingIntentId: ID!
}

"""
Autogenerated return type of InquirePaymentIntent.
"""
type InquirePaymentIntentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  needed: Boolean

  paymentIntent: PaymentIntent
}

type InstantChargeIntent implements Node {
  account: Account!

  car: Car

  connector: Connector!

  entrySource: InstantChargeIntentEntrySource!

  id: ID!

  pricingDetails: [PricingDetail!]

  promoCode: String

  remoteCharge: RemoteCharge
}

enum InstantChargeIntentEntrySource {
  """
  QR Code Scanner opened on user's native camera
  """
  CAMERA

  """
  QR Code Scanner opened on the app
  """
  HOME_BUTTON
}

type Invitation implements Node {
  account: Account!

  at: ISO8601DateTime!

  confirmedAt: ISO8601DateTime

  createdBy: AccountUser!

  details: [String!]

  firstname: String!

  fullname: String!

  id: ID!

  invitationText: String!

  lastname: String!

  phoneNumber: String!

  refusedAt: ISO8601DateTime

  status: InvitationStatusEnum!
}

"""
The connection type for Invitation.
"""
type InvitationConnection {
  """
  A list of edges.
  """
  edges: [InvitationEdge]

  """
  A list of nodes.
  """
  nodes: [Invitation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type InvitationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Invitation
}

enum InvitationStatusEnum {
  """
  Confirmed
  """
  CONFIRMED

  """
  Pending
  """
  PENDING

  """
  Refused
  """
  REFUSED
}

type Invoice implements Node {
  fileUrl: String

  fileUrlExpiresAt: ISO8601DateTime!

  id: ID!

  status: InvoiceStatusEnum!
}

enum InvoiceStatusEnum {
  """
  Available
  """
  AVAILABLE

  """
  Generation pending
  """
  PENDING
}

type Mutation {
  callAccessAction("Parameters for CallAccessAction" input: CallAccessActionInput!): CallAccessActionPayload

  cancelCapacityUsage("Parameters for CancelCapacityUsage" input: CancelCapacityUsageInput!): CancelCapacityUsagePayload

  cancelSingleBooking("Parameters for CancelSingleBooking" input: CancelSingleBookingInput!): CancelSingleBookingPayload

  changeAutochargeConfigActive("Parameters for ChangeAutochargeConfigActive" input: ChangeAutochargeConfigActiveInput!): ChangeAutochargeConfigActivePayload

  changeAutochargeConfigPaymentMethod("Parameters for ChangeAutochargeConfigPaymentMethod" input: ChangeAutochargeConfigPaymentMethodInput!): ChangeAutochargeConfigPaymentMethodPayload

  changeRemoteChargeObjective("Parameters for ChangeRemoteChargeObjective" input: ChangeRemoteChargeObjectiveInput!): ChangeRemoteChargeObjectivePayload

  checkChargePointQrCode("Parameters for CheckChargePointQrCode" input: CheckChargePointQrCodeInput!): CheckChargePointQrCodePayload

  checkLicensePlate("Parameters for CheckLicensePlate" input: CheckLicensePlateInput!): CheckLicensePlatePayload

  completeInvitation("Parameters for CompleteInvitation" input: CompleteInvitationInput!): CompleteInvitationPayload

  completePhoneChallenge("Parameters for CompletePhoneChallenge" input: CompletePhoneChallengeInput!): CompletePhoneChallengePayload

  confirmBookingIntentChoice("Parameters for ConfirmBookingIntentChoice" input: ConfirmBookingIntentChoiceInput!): ConfirmBookingIntentChoicePayload

  confirmBookingVenueFinalStep("Parameters for ConfirmBookingVenueFinalStep" input: ConfirmBookingVenueFinalStepInput!): ConfirmBookingVenueFinalStepPayload

  confirmBookingVenuePaymentStep("Parameters for ConfirmBookingVenuePaymentStep" input: ConfirmBookingVenuePaymentStepInput!): ConfirmBookingVenuePaymentStepPayload

  confirmCapacityUsage("Parameters for ConfirmCapacityUsage" input: ConfirmCapacityUsageInput!): ConfirmCapacityUsagePayload

  confirmCapacityUsageConnector("Parameters for ConfirmCapacityUsageConnector" input: ConfirmCapacityUsageConnectorInput!): ConfirmCapacityUsageConnectorPayload

  confirmInstantChargeIntent("Parameters for ConfirmInstantChargeIntent" input: ConfirmInstantChargeIntentInput!): ConfirmInstantChargeIntentPayload

  confirmUserDeletionIntent("Parameters for ConfirmUserDeletionIntent" input: ConfirmUserDeletionIntentInput!): ConfirmUserDeletionIntentPayload

  createAnonymousRight("Parameters for CreateAnonymousRight" input: CreateAnonymousRightInput!): CreateAnonymousRightPayload

  createBookingIntent("Parameters for CreateBookingIntent" input: CreateBookingIntentInput!): CreateBookingIntentPayload

  createCapacityBooking("Parameters for CreateCapacityBooking" input: CreateCapacityBookingInput!): CreateCapacityBookingPayload

  createCapacityUsage("Parameters for CreateCapacityUsage" input: CreateCapacityUsageInput!): CreateCapacityUsagePayload

  createCar("Parameters for CreateCar" input: CreateCarInput!): CreateCarPayload

  createInstantChargeIntent("Parameters for CreateInstantChargeIntent" input: CreateInstantChargeIntentInput!): CreateInstantChargeIntentPayload

  createInvitation("Parameters for CreateInvitation" input: CreateInvitationInput!): CreateInvitationPayload

  createPaymentMethod("Parameters for CreatePaymentMethod" input: CreatePaymentMethodInput!): CreatePaymentMethodPayload

  createReview("Parameters for CreateReview" input: CreateReviewInput!): CreateReviewPayload

  createUserDeletionIntent("Parameters for CreateUserDeletionIntent" input: CreateUserDeletionIntentInput!): CreateUserDeletionIntentPayload

  deleteCar("Parameters for DeleteCar" input: DeleteCarInput!): DeleteCarPayload

  deletePaymentMethod("Parameters for DeletePaymentMethod" input: DeletePaymentMethodInput!): DeletePaymentMethodPayload

  dismissExitSteps("Parameters for DismissExitSteps" input: DismissExitStepsInput!): DismissExitStepsPayload

  finishCapacityUsage("Parameters for FinishCapacityUsage" input: FinishCapacityUsageInput!): FinishCapacityUsagePayload

  finishSingleBooking("Parameters for FinishSingleBooking" input: FinishSingleBookingInput!): FinishSingleBookingPayload

  inquireInstantChargePaymentIntent("Parameters for InquireInstantChargePaymentIntent" input: InquireInstantChargePaymentIntentInput!): InquireInstantChargePaymentIntentPayload

  inquirePaymentIntent("Parameters for InquirePaymentIntent" input: InquirePaymentIntentInput!): InquirePaymentIntentPayload

  reinviteUser("Parameters for ReinviteUser" input: ReinviteUserInput!): ReinviteUserPayload

  reportRemoteChargeAction("Parameters for ReportRemoteChargeAction" input: ReportRemoteChargeActionInput!): ReportRemoteChargeActionPayload

  setBookingIntentPromoCode("Parameters for SetBookingIntentPromoCode" input: SetBookingIntentPromoCodeInput!): SetBookingIntentPromoCodePayload

  setInstantChargeIntentPromoCode("Parameters for SetInstantChargeIntentPromoCode" input: SetInstantChargeIntentPromoCodeInput!): SetInstantChargeIntentPromoCodePayload

  signIn("Parameters for SignIn" input: SignInInput!): SignInPayload

  signOut("Parameters for SignOut" input: SignOutInput!): SignOutPayload

  signUp("Parameters for SignUp" input: SignUpInput!): SignUpPayload

  startPhoneChallenge("Parameters for StartPhoneChallenge" input: StartPhoneChallengeInput!): StartPhoneChallengePayload

  switchAccount("Parameters for SwitchAccount" input: SwitchAccountInput!): SwitchAccountPayload

  updateAccountUser("Parameters for UpdateAccountUser" input: UpdateAccountUserInput!): UpdateAccountUserPayload

  updateCar("Parameters for UpdateCar" input: UpdateCarInput!): UpdateCarPayload

  updateUserPhoneNumber("Parameters for UpdateUserPhoneNumber" input: UpdateUserPhoneNumberInput!): UpdateUserPhoneNumberPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type PaymentIntent implements Node {
  account: Account!

  authorizationAmountCents: Int!

  authorizationStatus: String!

  id: ID!

  processoutInvoiceRef: String!
}

type PaymentMethod implements Node {
  account: Account!

  accountUser: User!

  cardExpiration: String!

  cardLast4Digits: String!

  cardName: String

  cardScheme: String!

  id: ID!

  processoutTokenRef: String!

  user: User! @deprecated(reason: "Use accountUser instead")
}

"""
The connection type for PaymentMethod.
"""
type PaymentMethodConnection {
  """
  A list of edges.
  """
  edges: [PaymentMethodEdge]

  """
  A list of nodes.
  """
  nodes: [PaymentMethod]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PaymentMethodEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PaymentMethod
}

type PricingDetail {
  label: String!
}

type Query {
  autocharge(id: ID!): Autocharge

  carBrands("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): CarBrandConnection!

  chargePoint(publicCode: String!): ChargePoint

  countries: [CountryObject!]!

  homeCards: [Card!]!

  me: User

  """
  Fetches an object given its ID.
  """
  node("ID of the object." id: ID!): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes("IDs of the objects." ids: [ID!]!): [Node]!

  remoteCharge(id: ID!): RemoteCharge

  station(id: ID!): Station

  stationAccess(id: ID!): StationAccess

  stations("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): StationConnection!

  supportMethods: [SupportMethod!]! @deprecated(reason: "Use supportSections instead.")

  supportSections: [SupportSection!]!
}

"""
Autogenerated input type of ReinviteUser
"""
input ReinviteUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  invitationId: ID!
}

"""
Autogenerated return type of ReinviteUser.
"""
type ReinviteUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  invitation: Invitation

  successMessage: String

  successTitle: String
}

type RemoteCharge implements Node {
  account: Account!

  accountUser: User!

  capacityUsage: CapacityUsage

  car: Car!

  cards: [Card!]!

  charge: Charge

  connector: Connector!

  id: ID!

  pricingDetails: [PricingDetail!]

  singleBooking: SingleBooking

  station: Station!

  step: RemoteChargeStep!

  user: User @deprecated(reason: "Use accountUser instead")
}

type RemoteChargeActionStep {
  actionConfirmMessage: String

  actionKey: String

  actionLabel: String

  actionType: RemoteChargeActionType

  connectorType: String

  message: String!

  subTitle: String

  title: String!
}

enum RemoteChargeActionType {
  """
  plug
  """
  plug

  """
  unplug
  """
  unplug
}

"""
Autogenerated return type of RemoteChargeChangedSubscription.
"""
type RemoteChargeChangedSubscriptionPayload {
  remoteCharge: RemoteCharge!
}

type RemoteChargeChargingStep {
  actionConfirmMessage: String

  actionKey: String

  actionLabel: String

  canShowPricing: Boolean!

  currentPower: Int

  currentPriceCents: Int

  currentSoc: Int

  energyDelivered: Int!

  estimatedDurationLabel: String

  estimatedRemainingDurationLabel: String

  targetSoc: Int!
}

type RemoteChargeCompletedStep {
  canShowPricing: Boolean!

  details: [RemoteChargeCompletedStepDetail!]!

  energyDelivered: Int!

  message: String!

  priceCents: Int!

  priceLabel: String

  title: String!
}

type RemoteChargeCompletedStepDetail {
  label: String!

  value: String!
}

union RemoteChargeStep = RemoteChargeActionStep|RemoteChargeChargingStep|RemoteChargeCompletedStep|RemoteChargeWaitStep

type RemoteChargeWaitStep {
  message: String!

  title: String!
}

"""
Autogenerated input type of ReportRemoteChargeAction
"""
input ReportRemoteChargeActionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  remoteChargeId: ID!

  actionKey: String!
}

"""
Autogenerated return type of ReportRemoteChargeAction.
"""
type ReportRemoteChargeActionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  remoteCharge: RemoteCharge
}

"""
Autogenerated input type of SetBookingIntentPromoCode
"""
input SetBookingIntentPromoCodeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  bookingIntentId: ID!

  promoCode: String
}

"""
Autogenerated return type of SetBookingIntentPromoCode.
"""
type SetBookingIntentPromoCodePayload {
  bookingIntent: BookingIntent

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

"""
Autogenerated input type of SetInstantChargeIntentPromoCode
"""
input SetInstantChargeIntentPromoCodeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  instantChargeIntentId: ID!

  promoCode: String
}

"""
Autogenerated return type of SetInstantChargeIntentPromoCode.
"""
type SetInstantChargeIntentPromoCodePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  instantChargeIntent: InstantChargeIntent
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  phoneChallengeCompletionToken: String!
}

"""
Autogenerated return type of SignIn.
"""
type SignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  sessionToken: String

  user: User
}

"""
Autogenerated input type of SignOut
"""
input SignOutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  sessionToken: String!
}

"""
Autogenerated return type of SignOut.
"""
type SignOutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  signedOut: Boolean
}

"""
Autogenerated input type of SignUp
"""
input SignUpInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  phoneChallengeCompletionToken: String!

  firstname: String!

  lastname: String
}

"""
Autogenerated return type of SignUp.
"""
type SignUpPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  sessionToken: String

  user: User
}

type SingleBooking implements Node {
  access: Access!

  account: Account!

  accountUser: User!

  canBeCanceled: Boolean!

  canBeFinished: Boolean!

  canDisplayAccess: Boolean!

  canExit: Boolean!

  canResume: Boolean!

  canRetry: Boolean!

  cancellationInfo: String

  car: Car!

  currentRemoteCharge: RemoteCharge @deprecated(reason: "Use account instead")

  endAt: ISO8601DateTime!

  id: ID!

  spot: Spot!

  startAt: ISO8601DateTime!

  station: Station!

  user: User! @deprecated(reason: "Use accountUser instead")
}

"""
Autogenerated return type of SingleBookingChangedSubscription.
"""
type SingleBookingChangedSubscriptionPayload {
  singleBooking: SingleBooking!
}

type Spot implements Node {
  connectors: [Connector!]!

  id: ID!

  number: Int!

  publicAvailability: SpotPublicAvailability!

  publicLabel: String!

  reducedMobility: Boolean!

  station: Station!
}

"""
Autogenerated return type of SpotChangedSubscription.
"""
type SpotChangedSubscriptionPayload {
  spot: Spot!
}

"""
The connection type for Spot.
"""
type SpotConnection {
  """
  A list of edges.
  """
  edges: [SpotEdge]

  """
  A list of nodes.
  """
  nodes: [Spot]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SpotEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Spot
}

enum SpotPublicAvailability {
  """
  The spot is available
  """
  AVAILABLE

  """
  The spot is occupied
  """
  OCCUPIED

  """
  The spot is reserved
  """
  RESERVED

  """
  The spot is unavailable
  """
  UNAVAILABLE
}

"""
Autogenerated input type of StartPhoneChallenge
"""
input StartPhoneChallengeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  phoneNumber: String!
}

"""
Autogenerated return type of StartPhoneChallenge.
"""
type StartPhoneChallengePayload {
  challengeToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

type Station implements Node {
  address: String!

  capacityBookableSpotsLimit: Int!

  cards: [Card!]!

  comingSoonLabel: String

  id: ID!

  latitude: Float!

  longitude: Float!

  name: String!

  parkingTypeLabel: String

  publicAvailablePower: Int

  spots: [Spot!]!

  spotsCount: Int!
}

type StationAccess implements Node {
  id: ID!

  stationName: String!
}

"""
The connection type for Station.
"""
type StationConnection {
  """
  A list of edges.
  """
  edges: [StationEdge]

  """
  A list of nodes.
  """
  nodes: [Station]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type StationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Station
}

type Subscription {
  remoteChargeChanged(remoteChargeId: ID!): RemoteChargeChangedSubscriptionPayload!

  singleBookingChanged(singleBookingId: ID!): SingleBookingChangedSubscriptionPayload!

  spotChanged: SpotChangedSubscriptionPayload!
}

union SupportItem = SupportMethod|SupportSection

type SupportMethod {
  deeplink: String!

  label: String!

  subLabel: String

  type: SupportMethodEnum!
}

enum SupportMethodEnum {
  """
  Chat
  """
  chat

  """
  FAQ
  """
  faq

  """
  Mail
  """
  mail

  """
  Phone
  """
  phone

  """
  Whatsapp
  """
  whatsapp
}

type SupportSection {
  children: [SupportItem!]!

  label: String!
}

"""
Autogenerated input type of SwitchAccount
"""
input SwitchAccountInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  accountId: ID!
}

"""
Autogenerated return type of SwitchAccount.
"""
type SwitchAccountPayload {
  account: Account

  accountUser: AccountUser

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

"""
Autogenerated input type of UpdateAccountUser
"""
input UpdateAccountUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  accountUserId: ID!

  firstname: String

  lastname: String

  role: AccountUserRole

  active: Boolean
}

"""
Autogenerated return type of UpdateAccountUser.
"""
type UpdateAccountUserPayload {
  accountUser: AccountUser

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

"""
Autogenerated input type of UpdateCar
"""
input UpdateCarInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  carId: ID!

  carModelId: ID

  carVersionId: ID

  licensePlateCountry: Country

  licensePlateNumber: String

  manualPlugs: [ConnectorPlug!]
}

"""
Autogenerated return type of UpdateCar.
"""
type UpdateCarPayload {
  car: Car

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!
}

"""
Autogenerated input type of UpdateUserPhoneNumber
"""
input UpdateUserPhoneNumberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  userId: ID!

  phoneChallengeCompletionToken: String!
}

"""
Autogenerated return type of UpdateUserPhoneNumber.
"""
type UpdateUserPhoneNumberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  user: User
}

type User implements Node {
  account(id: ID!): Account

  accounts("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): AccountConnection!

  fallbackAccount: Account!

  firstname: String @deprecated(reason: "Use account_user")

  id: ID!

  invitation(id: ID!): Invitation

  invitations("Returns the elements in the list that come after the specified cursor." after: String, "Returns the elements in the list that come before the specified cursor." before: String, "Returns the first _n_ elements from the list." first: Int, "Returns the last _n_ elements from the list." last: Int): InvitationConnection!

  lastname: String @deprecated(reason: "Use account_user")

  phoneNumber: String!
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

type UserDeletionIntent implements Node {
  id: ID!

  message: String!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
